steps:
- script: |
    echo "Detecting package manager..."
    if [ -f "$(Build.SourcesDirectory)/yarn.lock" ]; then
      echo "Found yarn.lock -> selecting yarn"
      echo "##vso[task.setvariable variable=useYarn]true"
    elif [ -f "$(Build.SourcesDirectory)/package-lock.json" ]; then
      echo "Found package-lock.json -> selecting npm"
      echo "##vso[task.setvariable variable=useYarn]false"
    else
      echo "No lockfile found. Defaulting to npm"
      echo "##vso[task.setvariable variable=useYarn]false"
    fi
  displayName: 'Detect package manager'

- script: |
    echo "Running frozen install"
    echo "" >> $(Build.SourcesDirectory)/.npmrc || true

    if [ '$(useYarn)' = 'true' ]; then
      echo "Using yarn --frozen-lockfile"
      yarn install --frozen-lockfile --cache-folder $(Pipeline.Workspace)/.yarn_cache
    else
      echo "Using npm ci"
      npm ci
    fi
  displayName: "Install dependencies"

- script: |
    echo "Running build"
    if [ '$(useYarn)' = 'true' ]; then
      yarn build
    else
      npm run build
    fi
  displayName: "Build project"

- task: CopyFiles@2
  displayName: 'Copy build output to staging directory'
  inputs:
    contents: 'dist/**'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.BuildId)-drop'
    publishLocation: 'Container'
